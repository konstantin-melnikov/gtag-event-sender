/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./gtag_event_sender.js":
/*!******************************!*\
  !*** ./gtag_event_sender.js ***!
  \******************************/
/***/ ((__unused_webpack_module, exports) => {

'use struct';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var GtagEventSender = /*#__PURE__*/function () {
  function GtagEventSender() {
    var _this = this;

    _classCallCheck(this, GtagEventSender);

    _defineProperty(this, "env", 'prod');

    var env = this.getParam('gtag_event_sender', 'env');

    if (env) {
      this.env = env;
      this.log("Script run in ".concat(this.env, " env"));
    }

    if (this.checkGtag()) {
      document.addEventListener('DOMContentLoaded', function () {
        _this.initEvents();
      });
    } else {
      var id = this.getParam('gtag_event_sender', 'id');

      if (id) {
        this.initGtag(id);
        document.addEventListener('DOMContentLoaded', function () {
          _this.initEvents();
        });
      }
    }
  }

  _createClass(GtagEventSender, [{
    key: "initGtag",
    value: function initGtag(id) {
      this.log("Add Gtag script for ".concat(id));
      var head = document.getElementsByTagName('head')[0];
      var script = document.createElement('script');
      script.async = true;
      script.src = "https://www.googletagmanager.com/gtag/js?id=".concat(id);
      var code = document.createElement('script');
      code.text = "window.dataLayer = window.dataLayer || [];\n      function gtag(){dataLayer.push(arguments);}\n      gtag('js', new Date());\n      gtag('config', '".concat(id, "');");
      head.prepend(script, code);
    }
  }, {
    key: "initEvents",
    value: function initEvents() {
      var _this2 = this;

      var events = document.querySelectorAll("[gtag]");

      if (events !== undefined) {
        events.forEach(function (event) {
          switch (event.getAttribute('gtag')) {
            case 'click':
              _this2.eventClick(event);

              break;

            case 'submit':
              _this2.eventSubmit(event);

              break;

            case 'scroll':
              _this2.eventScroll(event);

              break;

            default:
              _this2.log("Method for event \"".concat(event.getAttribute('gtag'), "\" not found."));

              break;
          }
        });
      }
    }
  }, {
    key: "eventClick",
    value: function eventClick(element) {
      var _this3 = this;

      element.addEventListener('click', function (event) {
        _this3.sendEvent(event.target);
      });
    }
  }, {
    key: "eventSubmit",
    value: function eventSubmit(element) {
      var _this4 = this;

      element.addEventListener('submit', function (event) {
        event.preventDefault();
        event.stopPropagation();

        _this4.sendEvent(event.target);

        if (_this4.env == 'dev') {
          _this4.log({
            message: 'Form can send in prod env'
          });
        } else {
          event.target.submit();
        }
      });
    }
  }, {
    key: "eventScroll",
    value: function eventScroll(element) {
      var _this5 = this;

      var observer = new IntersectionObserver(function (entries, observer) {
        entries.forEach(function (entry) {
          if (entry.isIntersecting) {
            _this5.sendEvent(entry.target);

            observer.unobserve(entry.target);
          }
        });
      }, {});
      observer.observe(element);
    }
  }, {
    key: "sendEvent",
    value: function sendEvent(target) {
      var action = target.getAttribute('gtag_action') || false;

      if (!action) {
        this.log({
          message: 'Must be attribute gtag_action',
          target: target
        });
        return false;
      }

      var arr = ['event_category', 'event_label', 'value'];
      var params = {};
      arr.map(function (el) {
        if (target.getAttribute("gtag_".concat(el))) {
          params[el] = target.getAttribute("gtag_".concat(el));
        }
      });

      if (this.env == 'dev') {
        this.log({
          message: 'Sent event',
          event: ['event', action, params]
        });
      } else {
        gtag('event', action, params);
      }
    }
  }, {
    key: "setDevEnv",
    value: function setDevEnv() {
      this.env = 'dev';
    }
  }, {
    key: "log",
    value: function log(variable) {
      if (this.env == 'dev') {
        var callerName;

        try {
          throw new Error();
        } catch (e) {
          var re = /([^(]+)@|at ([^(]+) \(/g;
          var aRegexResult = re.exec(e.stack);
          callerName = e.stack.split('at ')[2].split(' ')[0];
        }

        console.log({
          func: callerName,
          obj: variable
        });
      }
    }
  }, {
    key: "checkGtag",
    value: function checkGtag() {
      if (window.dataLayer === undefined) {
        this.log('Gtag is not init.');
        return false;
      }

      return true;
    }
  }, {
    key: "getParam",
    value: function getParam(scriptName, paramName) {
      var scripts = document.getElementsByTagName("script");

      for (var i = 0; i < scripts.length; i++) {
        if (scripts[i].src.indexOf("/" + scriptName) > -1) {
          var pa = scripts[i].src.split("?").pop().split("&");

          for (var j = 0; j < pa.length; j++) {
            var kv = pa[j].split("=");

            if (kv[0] === paramName) {
              return kv[1];
            }
          }

          return false;
        }
      }

      return false;
    }
  }]);

  return GtagEventSender;
}();

exports.gtagEventSender = new GtagEventSender();

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./gtag_event_sender.js");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,